I. Introduction
---------------

Framebuffer
-----------

The framebuffer is a hardware device that is capable of displaying a buffer of
memory on the screen. The framebuffer has 80 columns and 25 rows. We can
communicate with it through a memory mapped I/O address and we can consider that
it is an array of size 80x25. Its starting address is defined in screen.h as
FBUFFER_START_ADDR.

This module handles the communication with this framebuffer so that we can 
display text on the screen.

Format of Framebuffer cells
---------------------------

The memory is divided into 16 bit cells that encapsulate the character and its
attributes. The character is placed in the right most 8 bits and the attributes
in the left most 8 bits. (if we consider the format where LSB is on the left and
MSB is on the right)

To encode the character ASCII codes are used.

The attribute bits are divided as follows: the left most 4 bits are for 
background color, while the right most 4 bits are used for foreground color.

Depending of the mode setup, attribute bit 7 may be used for blinking thus
only 3 bits remain for background color. Attribute bit 3 may be used for
foreground intensity. Attribute bit 0 may be used for underline.

II. Implementations
------------------

The reference code for this section can be found in screen.h and screen.c.
There are two main operation to perform: sinit and swrite.

sinit will initiate the screen by filing the framebuffer with whitespaces
(ASCII character 0x20).

swrite will put characters on the screen without updating the cursor (will
be fixed in future commits).

III. Further work
-----------------

Maybe I will also implement a way to disable/enable blinking by accessing 
specific I/O addresses.
